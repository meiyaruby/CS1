module nat

import public bool
import public pair

data nat = O | S nat


||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predessesor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| returns true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n
--two base cases and one recursive case, keep recursing until base case
oddb: nat -> bool
oddb n = not (evenb n)

|||give a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m)= S(addp (mkPair n m))

|||give a pair of natural numbers, return its product
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair m (multp (mkPair n m)))

|||Factorial
factp: nat -> nat
factp O = (S O)
factp (S n) = multp (mkPair (S n) (factp n))

||| Given a pari of natural numbers, (a, b), return a-b.
||| if a <= b, the answer will be O.
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

|||given a pair of natural numbers, (a, b), return true
||| if a <= b otherwise return false
lep: pair nat nat -> bool
lep (mkPair O m) = true
lep (mkPair n O) = false
lep (mkPair (S n) (S m)) = lep (mkPair n m)

|||- given a pair of natural numbers, (x, n), return the value of x raised to the nth power
exp: pair nat nat -> nat
exp (mkPair x O) = (S O)
exp (mkPair O n) = O
exp (mkPair x (S n)) = multp (mkPair x (exp (mkPair x n)))

|||given a pair of natural numbers, (a, b), return true if a is equal to b, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair n O) = false
eqp (mkPair O m) = false
eqp (mkPair (S n) (S m)) = eqp (mkPair n m)

|||given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false
gtp: pair nat nat -> bool
gtp n = not (lep n)

|||given a pair of natural numbers, (a, b), return true if a is less than b
ltp: pair nat nat -> bool
ltp (mkPair O O) = false
ltp (mkPair O m) = true
ltp (mkPair n O) = false
ltp (mkPair (S n) (S m)) = ltp (mkPair n m)
